MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 22
# CSE_active_eliminated_expressions = 67
# CSE_active_total_size = 102
**VARIABLES**
DISCRETE statePlaces_00002_00002 #
{2..3}
DISCRETE statePlaces_00003_00002 #
{-1..3}
DISCRETE statePlaces_00003_00003 #
{-1..3}
DISCRETE statePlaces_00003_00004 #
{1..3}
DISCRETE statePlaces_00003_00005 #
{1..3}
DISCRETE actionTypes_00002 #
{1..4}
**CONSTRAINTS**
w-inintervalset(actionTypes_00002, [1,1,4,4])
**VARIABLES**
DISCRETE actionTypes_00003 #
{1..8}
**CONSTRAINTS**
w-inintervalset(actionTypes_00003, [1,2,4,4,8,8])
**VARIABLES**
DISCRETE actionTypes_00004 #
{2..4}
**CONSTRAINTS**
w-inintervalset(actionTypes_00004, [2,2,4,4])
**VARIABLES**
DISCRETE actionTypes_00005 #
{3..7}
**CONSTRAINTS**
w-inintervalset(actionTypes_00005, [3,3,5,5,7,7])
**VARIABLES**
DISCRETE actionFrom_00002 #
{0..2}
DISCRETE actionFrom_00003 #
{0..3}
DISCRETE actionTo_00002 #
{2..3}
DISCRETE actionTo_00003 #
{1..3}
DISCRETE actionTo_00004 #
{1..3}
**CONSTRAINTS**
w-inintervalset(actionTo_00004, [1,1,3,3])
**VARIABLES**
DISCRETE pointers_00000_00002 #
{1..2}
DISCRETE pointers_00000_00006 #
{1..2}
DISCRETE pointers_00001_00003 #
{0..1}
BOOL aux52 #Active-CSE: 2 occurrences of this expression or equivalent: ([pointers_00000_00002, 0;int(0..1)] <lex [pointers_00000_00006, 1;int(0..1)])
BOOL aux53 #Active-CSE: 2 occurrences of this expression or equivalent: ([3, statePlaces_00003_00005;int(2..3)] <lex [statePlaces_00002_00002, statePlaces_00003_00002;int(2..3)])
BOOL aux54 #Active-CSE: 2 occurrences of this expression or equivalent: ([statePlaces_00002_00002, statePlaces_00003_00002;int(2..3)] <lex [3, statePlaces_00003_00005;int(2..3)])
DISCRETE aux55 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([statePlaces_00002_00002, statePlaces_00003_00002], (actionFrom_00003 + -2))
{0..3}
DISCRETE aux56 #Active-CSE: 3 occurrences of this expression or equivalent: SafeElement([2, statePlaces_00003_00003], (actionFrom_00003 + -2))
{-1..3}
BOOL aux57 #Active-CSE: 3 occurrences of this expression or equivalent: (2 != actionTypes_00004)
BOOL aux58 #Active-CSE: 5 occurrences of this expression or equivalent: (1 != actionTypes_00003)
BOOL aux59 #Active-CSE: 5 occurrences of this expression or equivalent: (1 != actionTypes_00002)
BOOL aux60 #Active-CSE: 6 occurrences of this expression or equivalent: (2 != actionTypes_00003)
BOOL aux61 #Active-CSE: 2 occurrences of this expression or equivalent: (actionTo_00003=2)
BOOL aux62 #Active-CSE: 2 occurrences of this expression or equivalent: (3=statePlaces_00003_00005)
BOOL aux63 #Active-CSE: 2 occurrences of this expression or equivalent: (statePlaces_00002_00002=2)
BOOL aux64 #Active-CSE: 5 occurrences of this expression or equivalent: (4=actionTypes_00003)
BOOL aux65 #Active-CSE: 5 occurrences of this expression or equivalent: (4=actionTypes_00002)
BOOL aux66 #Active-CSE: 6 occurrences of this expression or equivalent: (8=actionTypes_00003)
BOOL aux67 #Active-CSE: 2 occurrences of this expression or equivalent: (pointers_00001_00003=0)
BOOL aux68 #Active-CSE: 2 occurrences of this expression or equivalent: (pointers_00001_00003=1)
BOOL aux69 #Active-CSE: 2 occurrences of this expression or equivalent: (actionFrom_00003=2)
BOOL aux70 #Active-CSE: 3 occurrences of this expression or equivalent: (4=actionTypes_00004)
DISCRETE aux71 #Active-CSE: 2 occurrences of this expression or equivalent: (actionFrom_00003 + -2)
{-2..1}
BOOL aux72 #Active-CSE: 2 occurrences of this expression or equivalent: (actionFrom_00003 in int(2..3))
BOOL aux73 #Active-CSE: 2 occurrences of this expression or equivalent: (7=actionTypes_00005)
BOOL aux74 #((1=actionTypes_00002) \/ ((4=actionTypes_00002) /\ (actionTo_00002 != 3)))
BOOL aux75 #(((8=actionTypes_00003) /\ (actionFrom_00003 != 3)) \/ (1=actionTypes_00003) \/ (2=actionTypes_00003) \/ ((4=actionTypes_00003) /\ (actionTo_00003 != 3)))
BOOL aux76 #((2=actionTypes_00004) \/ ((4=actionTypes_00004) /\ (actionTo_00004 != 3)))
BOOL aux77 #((3=actionTypes_00005) \/ (5=actionTypes_00005))
BOOL aux78 #((2=actionTypes_00003) \/ (4=actionTypes_00003))
BOOL aux79 #(pointers_00000_00002 + -1)
BOOL aux80 #(pointers_00000_00006 + -1)
BOOL aux81 #(3=actionTypes_00005)
BOOL aux82 #(actionTo_00002 + -2)
DISCRETE aux83 #(actionTo_00003 + -2)
{-1..1}
DISCRETE aux84 #(actionTo_00004 + -2)
{-1..1}
**CONSTRAINTS**
w-inintervalset(aux84, [-1,-1,1,1])
**VARIABLES**
BOOL aux85 #(5=actionTypes_00005)
**VARIABLES**
ALIAS output[2]=[2, 3]
**VARIABLES**
ALIAS input[2]=[3, 2]
**SEARCH**
PRINT[[statePlaces_00002_00002],[statePlaces_00003_00002],[statePlaces_00003_00003],[statePlaces_00003_00004],[statePlaces_00003_00005],[actionTypes_00002],[actionTypes_00003],[actionTypes_00004],[actionTypes_00005],[actionFrom_00002],[actionFrom_00003],[actionTo_00002],[actionTo_00003],[actionTo_00004],[pointers_00000_00002],[pointers_00000_00006],[pointers_00001_00003]]
VARORDER STATIC [statePlaces_00002_00002, statePlaces_00003_00002, statePlaces_00003_00003, statePlaces_00003_00004, statePlaces_00003_00005, actionTypes_00002, actionTypes_00003, actionTypes_00004, actionTypes_00005, actionFrom_00002, actionFrom_00003, actionTo_00002, actionTo_00003, actionTo_00004, pointers_00000_00002, pointers_00000_00006, pointers_00001_00003]
**CONSTRAINTS**
reify(watched-or({w-literal(actionTypes_00002,1),watched-and({w-literal(actionTypes_00002,4),diseq(actionTo_00002,3)})}), aux74)
reify(watched-or({watched-and({w-literal(actionTypes_00003,8),diseq(actionFrom_00003,3)}),w-literal(actionTypes_00003,1),w-literal(actionTypes_00003,2),watched-and({w-literal(actionTypes_00003,4),diseq(actionTo_00003,3)})}), aux75)
reify(watched-or({w-literal(actionTypes_00004,2),watched-and({w-literal(actionTypes_00004,4),diseq(actionTo_00004,3)})}), aux76)
reify(watched-or({w-literal(actionTypes_00005,3),w-literal(actionTypes_00005,5)}), aux77)
reify(watched-or({w-literal(actionTypes_00003,2),w-literal(actionTypes_00003,4)}), aux78)
reify(w-literal(actionTypes_00005,3), aux81)
reify(w-literal(actionTypes_00005,5), aux85)
reify(lexless([pointers_00000_00002, 0],[pointers_00000_00006, 1]), aux52)
reify(lexless([3, statePlaces_00003_00005],[statePlaces_00002_00002, statePlaces_00003_00002]), aux53)
reify(lexless([statePlaces_00002_00002, statePlaces_00003_00002],[3, statePlaces_00003_00005]), aux54)
watchelement_undefzero([statePlaces_00002_00002, statePlaces_00003_00002], aux71, aux55)
watchelement_undefzero([2, statePlaces_00003_00003], aux71, aux56)
reify(diseq(2,actionTypes_00004), aux57)
reify(diseq(1,actionTypes_00003), aux58)
reify(diseq(1,actionTypes_00002), aux59)
reify(diseq(2,actionTypes_00003), aux60)
reify(w-literal(actionTo_00003,2), aux61)
reify(w-literal(statePlaces_00003_00005,3), aux62)
reify(w-literal(statePlaces_00002_00002,2), aux63)
reify(w-literal(actionTypes_00003,4), aux64)
reify(w-literal(actionTypes_00002,4), aux65)
reify(w-literal(actionTypes_00003,8), aux66)
reify(w-literal(pointers_00001_00003,0), aux67)
reify(w-literal(pointers_00001_00003,1), aux68)
reify(w-literal(actionFrom_00003,2), aux69)
reify(w-literal(actionTypes_00004,4), aux70)
reify(w-inintervalset(actionFrom_00003,[2,3]), aux72)
reify(w-literal(actionTypes_00005,7), aux73)
watched-or({ineq(statePlaces_00002_00002, 3, -1),ineq(1, pointers_00000_00002, -1),lexless([3, -1],[statePlaces_00002_00002, statePlaces_00003_00002])})
watched-or({lexless([pointers_00000_00002, 0],[pointers_00000_00006, pointers_00001_00003]),lexless([statePlaces_00002_00002, statePlaces_00003_00002],[2, statePlaces_00003_00003]),lexless([2, statePlaces_00003_00003],[statePlaces_00002_00002, statePlaces_00003_00002])})
watched-or({w-literal(aux52,1),lexless([statePlaces_00002_00002, statePlaces_00003_00002],[2, statePlaces_00003_00004]),lexless([2, statePlaces_00003_00004],[statePlaces_00002_00002, statePlaces_00003_00002])})
watched-or({w-literal(aux52,1),w-literal(aux54,1),w-literal(aux53,1)})
watched-or({lexless([pointers_00000_00002, 0],[pointers_00000_00006, 2]),w-literal(aux54,1),w-literal(aux53,1)})
watched-or({ineq(statePlaces_00003_00003, statePlaces_00003_00004, -1),ineq(statePlaces_00003_00004, statePlaces_00003_00003, -1),ineq(pointers_00001_00003, 1, -1)})
reifyimply(w-literal(pointers_00000_00002,1), aux59)
reifyimply(gaceq(pointers_00000_00002,pointers_00000_00006), aux58)
ineq(aux60, aux67, 0)
ineq(aux57, aux68, 0)
reifyimply(w-literal(statePlaces_00003_00002,-1), aux74)
reifyimply(gaceq(statePlaces_00003_00002,statePlaces_00003_00003), aux75)
reifyimply(gaceq(statePlaces_00003_00003,statePlaces_00003_00004), aux76)
reifyimply(gaceq(statePlaces_00003_00004,statePlaces_00003_00005), aux77)
reifyimply(w-literal(statePlaces_00002_00002,3), aux65)
ineq(aux78, aux63, 0)
reifyimply(w-literal(pointers_00000_00002,2), !aux59)
reifyimply(w-literal(actionFrom_00002,0), !aux59)
reifyimply(w-literal(actionTo_00002,2), !aux59)
reifyimply(watchelement([3, 2], aux79, statePlaces_00002_00002), !aux59)
reifyimply(sumleq([pointers_00000_00002,1],pointers_00000_00006), !aux58)
reifyimply(w-literal(actionFrom_00003,0), !aux58)
ineq(!aux58, aux61, 0)
reifyimply(watchelement([3, 2], aux80, 2), !aux58)
ineq(!aux60, aux68, 0)
ineq(!aux60, aux69, 0)
reifyimply(w-literal(actionTo_00003,1), !aux60)
reifyimply(w-inintervalset(pointers_00001_00003,[1,2]), !aux60)
ineq(!aux60, aux63, 0)
ineq(!aux57, aux67, 0)
reifyimply(w-literal(actionTo_00004,1), !aux57)
ineq(aux81, aux62, 0)
reifyimply(ineq(3, actionTo_00002, 0), aux65)
reifyimply(w-literal(actionFrom_00002,2), aux65)
reifyimply(w-inintervalset(actionFrom_00002,[2,3]), aux65)
reifyimply(watchelement([statePlaces_00002_00002, statePlaces_00003_00002], aux82, statePlaces_00002_00002), aux65)
reifyimply(ineq(3, actionTo_00003, 0), aux64)
ineq(aux64, aux69, 0)
ineq(aux64, aux72, 0)
reifyimply(w-inintervalset(actionTo_00003,[2,3]), aux64)
reifyimply(watchelement_undefzero([2, statePlaces_00003_00003], aux83, aux56), aux64)
reifyimply(ineq(3, actionTo_00004, 0), aux70)
reifyimply(w-inintervalset(actionTo_00004,[2,3]), aux70)
reifyimply(watchelement_undefzero([2, statePlaces_00003_00004], aux84, 2), aux70)
reifyimply(w-literal(statePlaces_00003_00005,1), aux85)
ineq(aux73, aux62, 0)
reifyimply(w-literal(aux56,2), aux66)
reifyimply(ineq(3, actionFrom_00003, 0), aux66)
ineq(aux66, aux61, 0)
ineq(aux66, aux72, 0)
sumleq([pointers_00000_00002,-1],aux79)
sumgeq([pointers_00000_00002,-1],aux79)
sumleq([pointers_00000_00006,-1],aux80)
sumgeq([pointers_00000_00006,-1],aux80)
sumleq([actionTo_00002,-2],aux82)
sumgeq([actionTo_00002,-2],aux82)
sumleq([actionTo_00003,-2],aux83)
sumgeq([actionTo_00003,-2],aux83)
sumleq([actionTo_00004,-2],aux84)
sumgeq([actionTo_00004,-2],aux84)
sumleq([actionFrom_00003,-2],aux71)
sumgeq([actionFrom_00003,-2],aux71)
reifyimply(sumleq([1,statePlaces_00003_00004],statePlaces_00003_00005), aux73)
reifyimply(sumgeq([1,statePlaces_00003_00004],statePlaces_00003_00005), aux73)
reifyimply(sumleq([-1,aux55],aux56), aux66)
reifyimply(sumgeq([-1,aux55],aux56), aux66)
**EOF**
