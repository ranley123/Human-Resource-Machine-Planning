MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 26
# CSE_active_eliminated_expressions = 106
# CSE_active_total_size = 177
**VARIABLES**
DISCRETE statePlaces_00002_00002 #
{-1..100}
DISCRETE statePlaces_00002_00003 #
{-1..100}
DISCRETE statePlaces_00003_00002 #
{-1..100}
DISCRETE statePlaces_00003_00003 #
{-1..100}
DISCRETE statePlaces_00003_00004 #
{-1..100}
DISCRETE actionTypes_00002 #
{1..8}
**CONSTRAINTS**
w-inintervalset(actionTypes_00002, [1,1,3,8])
**VARIABLES**
DISCRETE actionTypes_00003 #
{1..8}
DISCRETE actionTypes_00004 #
{2..8}
DISCRETE actionFrom_00002 #
{0..3}
DISCRETE actionFrom_00003 #
{0..3}
DISCRETE actionFrom_00004 #
{0..3}
DISCRETE actionTo_00002 #
{0..3}
DISCRETE actionTo_00003 #
{0..3}
DISCRETE actionTo_00004 #
{0..3}
DISCRETE pointers_00000_00002 #
{0..2}
DISCRETE pointers_00000_00003 #
{0..2}
DISCRETE pointers_00001_00003 #
{0..1}
BOOL aux53 #Active-CSE: 3 occurrences of this expression or equivalent: (SafeElement([4, statePlaces_00003_00004], (actionFrom_00004 + -2))=SafeElement([4, statePlaces_00003_00004], (actionTo_00004 + -2)))
BOOL aux54 #Active-CSE: 3 occurrences of this expression or equivalent: (SafeElement([statePlaces_00002_00002, statePlaces_00003_00002], (actionTo_00002 + -2))=SafeElement([statePlaces_00002_00002, statePlaces_00003_00002], (actionFrom_00002 + -2)))
BOOL aux55 #Active-CSE: 3 occurrences of this expression or equivalent: (SafeElement([statePlaces_00002_00003, statePlaces_00003_00003], (actionTo_00003 + -2))=SafeElement([statePlaces_00002_00003, statePlaces_00003_00003], (actionFrom_00003 + -2)))
BOOL aux56 #Active-CSE: 2 occurrences of this expression or equivalent: ([4, statePlaces_00003_00004;int(2..3)] <lex [statePlaces_00002_00002, statePlaces_00003_00002;int(2..3)])
BOOL aux57 #Active-CSE: 2 occurrences of this expression or equivalent: ([statePlaces_00002_00002, statePlaces_00003_00002;int(2..3)] <lex [4, statePlaces_00003_00004;int(2..3)])
DISCRETE aux58 #Active-CSE: 5 occurrences of this expression or equivalent: SafeElement([statePlaces_00002_00002, statePlaces_00003_00002], (actionFrom_00003 + -2))
{-1..100}
DISCRETE aux59 #Active-CSE: 5 occurrences of this expression or equivalent: SafeElement([3, -1], (actionFrom_00002 + -2))
{-1..3}
**CONSTRAINTS**
w-inintervalset(aux59, [-1,0,3,3])
**VARIABLES**
DISCRETE aux60 #Active-CSE: 5 occurrences of this expression or equivalent: SafeElement([statePlaces_00002_00003, statePlaces_00003_00003], (actionFrom_00004 + -2))
{-1..100}
DISCRETE aux61 #Active-CSE: 9 occurrences of this expression or equivalent: SafeElement([4, statePlaces_00003_00004], (actionFrom_00004 + -2))
{-1..100}
DISCRETE aux62 #Active-CSE: 9 occurrences of this expression or equivalent: SafeElement([statePlaces_00002_00003, statePlaces_00003_00003], (actionFrom_00003 + -2))
{-1..100}
DISCRETE aux63 #Active-CSE: 9 occurrences of this expression or equivalent: SafeElement([statePlaces_00002_00002, statePlaces_00003_00002], (actionFrom_00002 + -2))
{-1..100}
DISCRETE aux64 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([3, -1], (actionTo_00002 + -2))
{-1..3}
**CONSTRAINTS**
w-inintervalset(aux64, [-1,0,3,3])
**VARIABLES**
DISCRETE aux65 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([statePlaces_00002_00003, statePlaces_00003_00003], (actionTo_00004 + -2))
{-1..100}
DISCRETE aux66 #Active-CSE: 2 occurrences of this expression or equivalent: SafeElement([statePlaces_00002_00002, statePlaces_00003_00002], (actionTo_00003 + -2))
{-1..100}
BOOL aux67 #Active-CSE: 5 occurrences of this expression or equivalent: (actionTo_00003 in int(2..3))
BOOL aux68 #Active-CSE: 5 occurrences of this expression or equivalent: (actionTo_00002 in int(2..3))
BOOL aux69 #Active-CSE: 5 occurrences of this expression or equivalent: (actionTo_00004 in int(2..3))
DISCRETE aux70 #Active-CSE: 2 occurrences of this expression or equivalent: (actionFrom_00002 + -2)
{-2..1}
BOOL aux71 #Active-CSE: 6 occurrences of this expression or equivalent: (actionFrom_00002 in int(2..3))
BOOL aux72 #Active-CSE: 6 occurrences of this expression or equivalent: (actionFrom_00003 in int(2..3))
BOOL aux73 #Active-CSE: 6 occurrences of this expression or equivalent: (actionFrom_00004 in int(2..3))
DISCRETE aux74 #Active-CSE: 2 occurrences of this expression or equivalent: (actionTo_00004 + -2)
{-2..1}
DISCRETE aux75 #Active-CSE: 2 occurrences of this expression or equivalent: (actionTo_00003 + -2)
{-2..1}
DISCRETE aux76 #Active-CSE: 2 occurrences of this expression or equivalent: (actionTo_00002 + -2)
{-2..1}
DISCRETE aux77 #Active-CSE: 2 occurrences of this expression or equivalent: (actionFrom_00003 + -2)
{-2..1}
DISCRETE aux78 #Active-CSE: 2 occurrences of this expression or equivalent: (actionFrom_00004 + -2)
{-2..1}
BOOL aux79 #(1 != actionTypes_00002)
BOOL aux80 #(1 != actionTypes_00003)
BOOL aux81 #(2 != actionTypes_00003)
BOOL aux82 #(2 != actionTypes_00004)
BOOL aux83 #(((7=actionTypes_00002) /\ (actionFrom_00002 != 3)) \/ ((8=actionTypes_00002) /\ (actionFrom_00002 != 3)) \/ (1=actionTypes_00002) \/ (3=actionTypes_00002) \/ (5=actionTypes_00002) \/ (6=actionTypes_00002) \/ ((4=actionTypes_00002) /\ (actionTo_00002 != 3)))
BOOL aux84 #(((7=actionTypes_00003) /\ (actionFrom_00003 != 3)) \/ ((8=actionTypes_00003) /\ (actionFrom_00003 != 3)) \/ (1=actionTypes_00003) \/ (2=actionTypes_00003) \/ (3=actionTypes_00003) \/ (5=actionTypes_00003) \/ (6=actionTypes_00003) \/ ((4=actionTypes_00003) /\ (actionTo_00003 != 3)))
BOOL aux85 #(((7=actionTypes_00004) /\ (actionFrom_00004 != 3)) \/ ((8=actionTypes_00004) /\ (actionFrom_00004 != 3)) \/ (2=actionTypes_00004) \/ (3=actionTypes_00004) \/ (5=actionTypes_00004) \/ (6=actionTypes_00004) \/ ((4=actionTypes_00004) /\ (actionTo_00004 != 3)))
BOOL aux86 #(4=actionTypes_00002)
BOOL aux87 #((2=actionTypes_00003) \/ (4=actionTypes_00003))
BOOL aux88 #((2=actionTypes_00004) \/ (4=actionTypes_00004))
BOOL aux89 #(1=actionTypes_00002)
BOOL aux90 #(1=actionTypes_00002)
BOOL aux91 #(1=actionTypes_00002)
BOOL aux92 #(1=actionTypes_00002)
BOOL aux93 #(1=actionTypes_00002)
DISCRETE aux94 #(pointers_00000_00002 + -1)
{-1..1}
BOOL aux95 #(1=actionTypes_00003)
BOOL aux96 #(1=actionTypes_00003)
BOOL aux97 #(1=actionTypes_00003)
BOOL aux98 #(1=actionTypes_00003)
BOOL aux99 #(1=actionTypes_00003)
DISCRETE aux100 #(pointers_00000_00003 + -1)
{-1..1}
BOOL aux101 #(2=actionTypes_00003)
BOOL aux102 #(2=actionTypes_00003)
BOOL aux103 #(2=actionTypes_00003)
BOOL aux104 #(2=actionTypes_00003)
BOOL aux105 #(2=actionTypes_00003)
BOOL aux106 #(2=actionTypes_00003)
BOOL aux107 #(2=actionTypes_00003)
BOOL aux108 #(2=actionTypes_00004)
BOOL aux109 #(2=actionTypes_00004)
BOOL aux110 #(2=actionTypes_00004)
BOOL aux111 #(2=actionTypes_00004)
BOOL aux112 #(2=actionTypes_00004)
BOOL aux113 #(3=actionTypes_00002)
BOOL aux114 #(3=actionTypes_00002)
BOOL aux115 #(3=actionTypes_00002)
BOOL aux116 #(3=actionTypes_00002)
BOOL aux117 #(3=actionTypes_00002)
BOOL aux118 #(3=actionTypes_00002)
BOOL aux119 #(3=actionTypes_00003)
BOOL aux120 #(3=actionTypes_00003)
BOOL aux121 #(3=actionTypes_00003)
BOOL aux122 #(3=actionTypes_00003)
BOOL aux123 #(3=actionTypes_00003)
BOOL aux124 #(3=actionTypes_00003)
BOOL aux125 #(3=actionTypes_00004)
BOOL aux126 #(3=actionTypes_00004)
BOOL aux127 #(3=actionTypes_00004)
BOOL aux128 #(3=actionTypes_00004)
BOOL aux129 #(3=actionTypes_00004)
BOOL aux130 #(3=actionTypes_00004)
BOOL aux131 #(4=actionTypes_00002)
BOOL aux132 #(4=actionTypes_00002)
BOOL aux133 #(4=actionTypes_00002)
BOOL aux134 #(4=actionTypes_00002)
BOOL aux135 #(4=actionTypes_00002)
BOOL aux136 #(4=actionTypes_00003)
BOOL aux137 #(4=actionTypes_00003)
BOOL aux138 #(4=actionTypes_00003)
BOOL aux139 #(4=actionTypes_00003)
BOOL aux140 #(4=actionTypes_00003)
BOOL aux141 #(4=actionTypes_00003)
BOOL aux142 #(4=actionTypes_00004)
BOOL aux143 #(4=actionTypes_00004)
BOOL aux144 #(4=actionTypes_00004)
BOOL aux145 #(4=actionTypes_00004)
BOOL aux146 #(4=actionTypes_00004)
BOOL aux147 #(4=actionTypes_00004)
BOOL aux148 #(5=actionTypes_00002)
BOOL aux149 #(5=actionTypes_00002)
BOOL aux150 #(5=actionTypes_00002)
BOOL aux151 #(5=actionTypes_00002)
BOOL aux152 #(5=actionTypes_00002)
BOOL aux153 #(5=actionTypes_00002)
BOOL aux154 #(5=actionTypes_00002)
BOOL aux155 #(5=actionTypes_00002)
BOOL aux156 #(5=actionTypes_00003)
BOOL aux157 #(5=actionTypes_00003)
BOOL aux158 #(5=actionTypes_00003)
BOOL aux159 #(5=actionTypes_00003)
BOOL aux160 #(5=actionTypes_00003)
BOOL aux161 #(5=actionTypes_00003)
BOOL aux162 #(5=actionTypes_00003)
BOOL aux163 #(5=actionTypes_00003)
BOOL aux164 #(5=actionTypes_00004)
BOOL aux165 #(5=actionTypes_00004)
BOOL aux166 #(5=actionTypes_00004)
BOOL aux167 #(5=actionTypes_00004)
BOOL aux168 #(5=actionTypes_00004)
BOOL aux169 #(5=actionTypes_00004)
BOOL aux170 #(5=actionTypes_00004)
BOOL aux171 #(5=actionTypes_00004)
BOOL aux172 #(6=actionTypes_00002)
BOOL aux173 #(6=actionTypes_00002)
BOOL aux174 #(6=actionTypes_00002)
BOOL aux175 #(6=actionTypes_00002)
BOOL aux176 #(6=actionTypes_00002)
BOOL aux177 #(6=actionTypes_00002)
BOOL aux178 #(6=actionTypes_00002)
BOOL aux179 #(6=actionTypes_00003)
BOOL aux180 #(6=actionTypes_00003)
BOOL aux181 #(6=actionTypes_00003)
BOOL aux182 #(6=actionTypes_00003)
BOOL aux183 #(6=actionTypes_00003)
BOOL aux184 #(6=actionTypes_00003)
BOOL aux185 #(6=actionTypes_00003)
BOOL aux186 #(6=actionTypes_00004)
BOOL aux187 #(6=actionTypes_00004)
BOOL aux188 #(6=actionTypes_00004)
BOOL aux189 #(6=actionTypes_00004)
BOOL aux190 #(6=actionTypes_00004)
BOOL aux191 #(6=actionTypes_00004)
BOOL aux192 #(6=actionTypes_00004)
BOOL aux193 #(7=actionTypes_00002)
BOOL aux194 #(7=actionTypes_00002)
BOOL aux195 #(7=actionTypes_00002)
BOOL aux196 #(7=actionTypes_00002)
BOOL aux197 #(7=actionTypes_00002)
BOOL aux198 #(7=actionTypes_00002)
BOOL aux199 #(7=actionTypes_00002)
BOOL aux200 #(7=actionTypes_00003)
BOOL aux201 #(7=actionTypes_00003)
BOOL aux202 #(7=actionTypes_00003)
BOOL aux203 #(7=actionTypes_00003)
BOOL aux204 #(7=actionTypes_00003)
BOOL aux205 #(7=actionTypes_00003)
BOOL aux206 #(7=actionTypes_00003)
BOOL aux207 #(7=actionTypes_00004)
BOOL aux208 #(7=actionTypes_00004)
BOOL aux209 #(7=actionTypes_00004)
BOOL aux210 #(7=actionTypes_00004)
BOOL aux211 #(7=actionTypes_00004)
BOOL aux212 #(7=actionTypes_00004)
BOOL aux213 #(7=actionTypes_00004)
BOOL aux214 #(8=actionTypes_00002)
BOOL aux215 #(8=actionTypes_00002)
BOOL aux216 #(8=actionTypes_00002)
BOOL aux217 #(8=actionTypes_00002)
BOOL aux218 #(8=actionTypes_00002)
BOOL aux219 #(8=actionTypes_00002)
BOOL aux220 #(8=actionTypes_00003)
BOOL aux221 #(8=actionTypes_00003)
BOOL aux222 #(8=actionTypes_00003)
BOOL aux223 #(8=actionTypes_00003)
BOOL aux224 #(8=actionTypes_00003)
BOOL aux225 #(8=actionTypes_00003)
BOOL aux226 #(8=actionTypes_00004)
BOOL aux227 #(8=actionTypes_00004)
BOOL aux228 #(8=actionTypes_00004)
BOOL aux229 #(8=actionTypes_00004)
BOOL aux230 #(8=actionTypes_00004)
BOOL aux231 #(8=actionTypes_00004)
**VARIABLES**
ALIAS output[2]=[4, 4]
**VARIABLES**
ALIAS input[2]=[3, 2]
**SEARCH**
PRINT[[statePlaces_00002_00002],[statePlaces_00002_00003],[statePlaces_00003_00002],[statePlaces_00003_00003],[statePlaces_00003_00004],[actionTypes_00002],[actionTypes_00003],[actionTypes_00004],[actionFrom_00002],[actionFrom_00003],[actionFrom_00004],[actionTo_00002],[actionTo_00003],[actionTo_00004],[pointers_00000_00002],[pointers_00000_00003],[pointers_00001_00003]]
**CONSTRAINTS**
reify(diseq(1,actionTypes_00002), aux79)
reify(diseq(1,actionTypes_00003), aux80)
reify(diseq(2,actionTypes_00003), aux81)
reify(diseq(2,actionTypes_00004), aux82)
reify(watched-or({watched-and({w-literal(actionTypes_00002,7),diseq(actionFrom_00002,3)}),watched-and({w-literal(actionTypes_00002,8),diseq(actionFrom_00002,3)}),w-literal(actionTypes_00002,1),w-literal(actionTypes_00002,3),w-literal(actionTypes_00002,5),w-literal(actionTypes_00002,6),watched-and({w-literal(actionTypes_00002,4),diseq(actionTo_00002,3)})}), aux83)
reify(watched-or({watched-and({w-literal(actionTypes_00003,7),diseq(actionFrom_00003,3)}),watched-and({w-literal(actionTypes_00003,8),diseq(actionFrom_00003,3)}),w-literal(actionTypes_00003,1),w-literal(actionTypes_00003,2),w-literal(actionTypes_00003,3),w-literal(actionTypes_00003,5),w-literal(actionTypes_00003,6),watched-and({w-literal(actionTypes_00003,4),diseq(actionTo_00003,3)})}), aux84)
reify(watched-or({watched-and({w-literal(actionTypes_00004,7),diseq(actionFrom_00004,3)}),watched-and({w-literal(actionTypes_00004,8),diseq(actionFrom_00004,3)}),w-literal(actionTypes_00004,2),w-literal(actionTypes_00004,3),w-literal(actionTypes_00004,5),w-literal(actionTypes_00004,6),watched-and({w-literal(actionTypes_00004,4),diseq(actionTo_00004,3)})}), aux85)
reify(w-literal(actionTypes_00002,4), aux86)
reify(watched-or({w-literal(actionTypes_00003,2),w-literal(actionTypes_00003,4)}), aux87)
reify(watched-or({w-literal(actionTypes_00004,2),w-literal(actionTypes_00004,4)}), aux88)
reify(w-literal(actionTypes_00002,1), aux89)
reify(w-literal(actionTypes_00002,1), aux90)
reify(w-literal(actionTypes_00002,1), aux91)
reify(w-literal(actionTypes_00002,1), aux92)
reify(w-literal(actionTypes_00002,1), aux93)
reify(w-literal(actionTypes_00003,1), aux95)
reify(w-literal(actionTypes_00003,1), aux96)
reify(w-literal(actionTypes_00003,1), aux97)
reify(w-literal(actionTypes_00003,1), aux98)
reify(w-literal(actionTypes_00003,1), aux99)
reify(w-literal(actionTypes_00003,2), aux101)
reify(w-literal(actionTypes_00003,2), aux102)
reify(w-literal(actionTypes_00003,2), aux103)
reify(w-literal(actionTypes_00003,2), aux104)
reify(w-literal(actionTypes_00003,2), aux105)
reify(w-literal(actionTypes_00003,2), aux106)
reify(w-literal(actionTypes_00003,2), aux107)
reify(w-literal(actionTypes_00004,2), aux108)
reify(w-literal(actionTypes_00004,2), aux109)
reify(w-literal(actionTypes_00004,2), aux110)
reify(w-literal(actionTypes_00004,2), aux111)
reify(w-literal(actionTypes_00004,2), aux112)
reify(w-literal(actionTypes_00002,3), aux113)
reify(w-literal(actionTypes_00002,3), aux114)
reify(w-literal(actionTypes_00002,3), aux115)
reify(w-literal(actionTypes_00002,3), aux116)
reify(w-literal(actionTypes_00002,3), aux117)
reify(w-literal(actionTypes_00002,3), aux118)
reify(w-literal(actionTypes_00003,3), aux119)
reify(w-literal(actionTypes_00003,3), aux120)
reify(w-literal(actionTypes_00003,3), aux121)
reify(w-literal(actionTypes_00003,3), aux122)
reify(w-literal(actionTypes_00003,3), aux123)
reify(w-literal(actionTypes_00003,3), aux124)
reify(w-literal(actionTypes_00004,3), aux125)
reify(w-literal(actionTypes_00004,3), aux126)
reify(w-literal(actionTypes_00004,3), aux127)
reify(w-literal(actionTypes_00004,3), aux128)
reify(w-literal(actionTypes_00004,3), aux129)
reify(w-literal(actionTypes_00004,3), aux130)
reify(w-literal(actionTypes_00002,4), aux131)
reify(w-literal(actionTypes_00002,4), aux132)
reify(w-literal(actionTypes_00002,4), aux133)
reify(w-literal(actionTypes_00002,4), aux134)
reify(w-literal(actionTypes_00002,4), aux135)
reify(w-literal(actionTypes_00003,4), aux136)
reify(w-literal(actionTypes_00003,4), aux137)
reify(w-literal(actionTypes_00003,4), aux138)
reify(w-literal(actionTypes_00003,4), aux139)
reify(w-literal(actionTypes_00003,4), aux140)
reify(w-literal(actionTypes_00003,4), aux141)
reify(w-literal(actionTypes_00004,4), aux142)
reify(w-literal(actionTypes_00004,4), aux143)
reify(w-literal(actionTypes_00004,4), aux144)
reify(w-literal(actionTypes_00004,4), aux145)
reify(w-literal(actionTypes_00004,4), aux146)
reify(w-literal(actionTypes_00004,4), aux147)
reify(w-literal(actionTypes_00002,5), aux148)
reify(w-literal(actionTypes_00002,5), aux149)
reify(w-literal(actionTypes_00002,5), aux150)
reify(w-literal(actionTypes_00002,5), aux151)
reify(w-literal(actionTypes_00002,5), aux152)
reify(w-literal(actionTypes_00002,5), aux153)
reify(w-literal(actionTypes_00002,5), aux154)
reify(w-literal(actionTypes_00002,5), aux155)
reify(w-literal(actionTypes_00003,5), aux156)
reify(w-literal(actionTypes_00003,5), aux157)
reify(w-literal(actionTypes_00003,5), aux158)
reify(w-literal(actionTypes_00003,5), aux159)
reify(w-literal(actionTypes_00003,5), aux160)
reify(w-literal(actionTypes_00003,5), aux161)
reify(w-literal(actionTypes_00003,5), aux162)
reify(w-literal(actionTypes_00003,5), aux163)
reify(w-literal(actionTypes_00004,5), aux164)
reify(w-literal(actionTypes_00004,5), aux165)
reify(w-literal(actionTypes_00004,5), aux166)
reify(w-literal(actionTypes_00004,5), aux167)
reify(w-literal(actionTypes_00004,5), aux168)
reify(w-literal(actionTypes_00004,5), aux169)
reify(w-literal(actionTypes_00004,5), aux170)
reify(w-literal(actionTypes_00004,5), aux171)
reify(w-literal(actionTypes_00002,6), aux172)
reify(w-literal(actionTypes_00002,6), aux173)
reify(w-literal(actionTypes_00002,6), aux174)
reify(w-literal(actionTypes_00002,6), aux175)
reify(w-literal(actionTypes_00002,6), aux176)
reify(w-literal(actionTypes_00002,6), aux177)
reify(w-literal(actionTypes_00002,6), aux178)
reify(w-literal(actionTypes_00003,6), aux179)
reify(w-literal(actionTypes_00003,6), aux180)
reify(w-literal(actionTypes_00003,6), aux181)
reify(w-literal(actionTypes_00003,6), aux182)
reify(w-literal(actionTypes_00003,6), aux183)
reify(w-literal(actionTypes_00003,6), aux184)
reify(w-literal(actionTypes_00003,6), aux185)
reify(w-literal(actionTypes_00004,6), aux186)
reify(w-literal(actionTypes_00004,6), aux187)
reify(w-literal(actionTypes_00004,6), aux188)
reify(w-literal(actionTypes_00004,6), aux189)
reify(w-literal(actionTypes_00004,6), aux190)
reify(w-literal(actionTypes_00004,6), aux191)
reify(w-literal(actionTypes_00004,6), aux192)
reify(w-literal(actionTypes_00002,7), aux193)
reify(w-literal(actionTypes_00002,7), aux194)
reify(w-literal(actionTypes_00002,7), aux195)
reify(w-literal(actionTypes_00002,7), aux196)
reify(w-literal(actionTypes_00002,7), aux197)
reify(w-literal(actionTypes_00002,7), aux198)
reify(w-literal(actionTypes_00002,7), aux199)
reify(w-literal(actionTypes_00003,7), aux200)
reify(w-literal(actionTypes_00003,7), aux201)
reify(w-literal(actionTypes_00003,7), aux202)
reify(w-literal(actionTypes_00003,7), aux203)
reify(w-literal(actionTypes_00003,7), aux204)
reify(w-literal(actionTypes_00003,7), aux205)
reify(w-literal(actionTypes_00003,7), aux206)
reify(w-literal(actionTypes_00004,7), aux207)
reify(w-literal(actionTypes_00004,7), aux208)
reify(w-literal(actionTypes_00004,7), aux209)
reify(w-literal(actionTypes_00004,7), aux210)
reify(w-literal(actionTypes_00004,7), aux211)
reify(w-literal(actionTypes_00004,7), aux212)
reify(w-literal(actionTypes_00004,7), aux213)
reify(w-literal(actionTypes_00002,8), aux214)
reify(w-literal(actionTypes_00002,8), aux215)
reify(w-literal(actionTypes_00002,8), aux216)
reify(w-literal(actionTypes_00002,8), aux217)
reify(w-literal(actionTypes_00002,8), aux218)
reify(w-literal(actionTypes_00002,8), aux219)
reify(w-literal(actionTypes_00003,8), aux220)
reify(w-literal(actionTypes_00003,8), aux221)
reify(w-literal(actionTypes_00003,8), aux222)
reify(w-literal(actionTypes_00003,8), aux223)
reify(w-literal(actionTypes_00003,8), aux224)
reify(w-literal(actionTypes_00003,8), aux225)
reify(w-literal(actionTypes_00004,8), aux226)
reify(w-literal(actionTypes_00004,8), aux227)
reify(w-literal(actionTypes_00004,8), aux228)
reify(w-literal(actionTypes_00004,8), aux229)
reify(w-literal(actionTypes_00004,8), aux230)
reify(w-literal(actionTypes_00004,8), aux231)
reify(watchelement_undefzero([4, statePlaces_00003_00004], aux74, aux61), aux53)
reify(watchelement_undefzero([statePlaces_00002_00002, statePlaces_00003_00002], aux76, aux63), aux54)
reify(watchelement_undefzero([statePlaces_00002_00003, statePlaces_00003_00003], aux75, aux62), aux55)
reify(lexless([4, statePlaces_00003_00004],[statePlaces_00002_00002, statePlaces_00003_00002]), aux56)
reify(lexless([statePlaces_00002_00002, statePlaces_00003_00002],[4, statePlaces_00003_00004]), aux57)
watchelement_undefzero([statePlaces_00002_00002, statePlaces_00003_00002], aux77, aux58)
watchelement_undefzero([3, -1], aux70, aux59)
watchelement_undefzero([statePlaces_00002_00003, statePlaces_00003_00003], aux78, aux60)
watchelement_undefzero([4, statePlaces_00003_00004], aux78, aux61)
watchelement_undefzero([statePlaces_00002_00003, statePlaces_00003_00003], aux77, aux62)
watchelement_undefzero([statePlaces_00002_00002, statePlaces_00003_00002], aux70, aux63)
watchelement_undefzero([3, -1], aux76, aux64)
watchelement_undefzero([statePlaces_00002_00003, statePlaces_00003_00003], aux74, aux65)
watchelement_undefzero([statePlaces_00002_00002, statePlaces_00003_00002], aux75, aux66)
reify(w-inintervalset(actionTo_00003,[2,3]), aux67)
reify(w-inintervalset(actionTo_00002,[2,3]), aux68)
reify(w-inintervalset(actionTo_00004,[2,3]), aux69)
reify(w-inintervalset(actionFrom_00002,[2,3]), aux71)
reify(w-inintervalset(actionFrom_00003,[2,3]), aux72)
reify(w-inintervalset(actionFrom_00004,[2,3]), aux73)
watched-or({ineq(statePlaces_00002_00002, 3, -1),ineq(1, pointers_00000_00002, -1),lexless([3, -1],[statePlaces_00002_00002, statePlaces_00003_00002])})
watched-or({ineq(statePlaces_00002_00003, 3, -1),lexless([1, 0],[pointers_00000_00003, pointers_00001_00003]),lexless([3, -1],[statePlaces_00002_00003, statePlaces_00003_00003])})
watched-or({lexless([statePlaces_00002_00002, statePlaces_00003_00002],[statePlaces_00002_00003, statePlaces_00003_00003]),lexless([statePlaces_00002_00003, statePlaces_00003_00003],[statePlaces_00002_00002, statePlaces_00003_00002]),lexless([pointers_00000_00002, 0],[pointers_00000_00003, pointers_00001_00003])})
watched-or({lexless([pointers_00000_00002, 0],[pointers_00000_00003, 1]),w-literal(aux57,1),w-literal(aux56,1)})
watched-or({lexless([pointers_00000_00002, 0],[pointers_00000_00003, 2]),w-literal(aux57,1),w-literal(aux56,1)})
watched-or({lexless([statePlaces_00002_00003, statePlaces_00003_00003],[4, statePlaces_00003_00004]),ineq(pointers_00001_00003, 1, -1),lexless([4, statePlaces_00003_00004],[statePlaces_00002_00003, statePlaces_00003_00003])})
reifyimply(w-literal(pointers_00000_00002,1), aux79)
reifyimply(gaceq(pointers_00000_00002,pointers_00000_00003), aux80)
reifyimply(w-literal(pointers_00001_00003,0), aux81)
reifyimply(w-literal(pointers_00001_00003,1), aux82)
reifyimply(w-literal(statePlaces_00003_00002,-1), aux83)
reifyimply(gaceq(statePlaces_00003_00002,statePlaces_00003_00003), aux84)
reifyimply(gaceq(statePlaces_00003_00003,statePlaces_00003_00004), aux85)
reifyimply(w-literal(statePlaces_00002_00002,3), aux86)
reifyimply(gaceq(statePlaces_00002_00002,statePlaces_00002_00003), aux87)
reifyimply(w-literal(statePlaces_00002_00003,4), aux88)
reifyimply(w-literal(pointers_00000_00002,2), aux89)
reifyimply(w-literal(actionFrom_00002,0), aux90)
reifyimply(w-literal(actionTo_00002,2), aux91)
reifyimply(w-inintervalset(pointers_00000_00002,[1,2]), aux92)
reifyimply(watchelement_undefzero([3, 2], aux94, statePlaces_00002_00002), aux93)
reifyimply(w-literal(actionFrom_00003,0), aux96)
reifyimply(w-literal(actionTo_00003,2), aux97)
reifyimply(w-inintervalset(pointers_00000_00003,[1,2]), aux98)
reifyimply(watchelement_undefzero([3, 2], aux100, statePlaces_00002_00003), aux99)
reifyimply(diseq(statePlaces_00002_00003,-1), aux101)
reifyimply(diseq(statePlaces_00002_00002,-1), aux102)
reifyimply(w-literal(pointers_00001_00003,1), aux103)
reifyimply(w-literal(actionFrom_00003,2), aux104)
reifyimply(w-literal(actionTo_00003,1), aux105)
reifyimply(w-inintervalset(pointers_00001_00003,[1,2]), aux106)
reifyimply(w-literal(statePlaces_00002_00002,4), aux107)
reifyimply(diseq(statePlaces_00002_00003,-1), aux108)
reifyimply(w-literal(pointers_00001_00003,0), aux109)
reifyimply(w-literal(actionFrom_00004,2), aux110)
reifyimply(w-literal(actionTo_00004,1), aux111)
reifyimply(w-literal(statePlaces_00002_00003,4), aux112)
ineq(aux113, aux54, 0)
reifyimply(ineq(3, actionFrom_00002, 0), aux114)
reifyimply(diseq(aux63,-1), aux115)
reifyimply(w-literal(actionTo_00002,2), aux116)
ineq(aux117, aux68, 0)
ineq(aux118, aux71, 0)
ineq(aux119, aux55, 0)
reifyimply(ineq(3, actionFrom_00003, 0), aux120)
reifyimply(diseq(aux62,-1), aux121)
reifyimply(w-literal(actionTo_00003,2), aux122)
ineq(aux123, aux67, 0)
ineq(aux124, aux72, 0)
ineq(aux125, aux53, 0)
reifyimply(ineq(3, actionFrom_00004, 0), aux126)
reifyimply(diseq(aux61,-1), aux127)
reifyimply(w-literal(actionTo_00004,2), aux128)
ineq(aux129, aux69, 0)
ineq(aux130, aux73, 0)
reifyimply(ineq(3, actionTo_00002, 0), aux131)
reifyimply(w-literal(actionFrom_00002,2), aux132)
ineq(aux133, aux71, 0)
ineq(aux134, aux68, 0)
ineq(aux135, aux54, 0)
reifyimply(ineq(3, actionTo_00003, 0), aux136)
reifyimply(w-literal(actionFrom_00003,2), aux137)
reifyimply(diseq(statePlaces_00002_00002,-1), aux138)
ineq(aux139, aux72, 0)
ineq(aux140, aux67, 0)
ineq(aux141, aux55, 0)
reifyimply(ineq(3, actionTo_00004, 0), aux142)
reifyimply(w-literal(actionFrom_00004,2), aux143)
reifyimply(diseq(statePlaces_00002_00003,-1), aux144)
ineq(aux145, aux73, 0)
ineq(aux146, aux69, 0)
ineq(aux147, aux53, 0)
reifyimply(ineq(3, actionFrom_00002, 0), aux148)
reifyimply(diseq(aux63,-1), aux149)
reifyimply(diseq(aux64,-1), aux150)
reifyimply(w-literal(actionTo_00002,2), aux151)
ineq(aux152, aux68, 0)
ineq(aux153, aux71, 0)
reifyimply(diseq(aux59,-1), aux154)
reifyimply(ineq(3, actionFrom_00003, 0), aux156)
reifyimply(diseq(aux62,-1), aux157)
reifyimply(diseq(aux66,-1), aux158)
reifyimply(w-literal(actionTo_00003,2), aux159)
ineq(aux160, aux67, 0)
ineq(aux161, aux72, 0)
reifyimply(diseq(aux58,-1), aux162)
reifyimply(ineq(3, actionFrom_00004, 0), aux164)
reifyimply(diseq(aux61,-1), aux165)
reifyimply(diseq(aux65,-1), aux166)
reifyimply(w-literal(actionTo_00004,2), aux167)
ineq(aux168, aux69, 0)
ineq(aux169, aux73, 0)
reifyimply(diseq(aux60,-1), aux170)
reifyimply(ineq(3, actionFrom_00002, 0), aux172)
reifyimply(diseq(aux63,-1), aux173)
reifyimply(diseq(aux64,-1), aux174)
reifyimply(w-literal(actionTo_00002,2), aux175)
ineq(aux177, aux68, 0)
ineq(aux178, aux71, 0)
reifyimply(ineq(3, actionFrom_00003, 0), aux179)
reifyimply(diseq(aux62,-1), aux180)
reifyimply(diseq(aux66,-1), aux181)
reifyimply(w-literal(actionTo_00003,2), aux182)
ineq(aux184, aux67, 0)
ineq(aux185, aux72, 0)
reifyimply(ineq(3, actionFrom_00004, 0), aux186)
reifyimply(diseq(aux61,-1), aux187)
reifyimply(diseq(aux65,-1), aux188)
reifyimply(w-literal(actionTo_00004,2), aux189)
ineq(aux191, aux69, 0)
ineq(aux192, aux73, 0)
ineq(aux193, aux54, 0)
reifyimply(ineq(3, actionFrom_00002, 0), aux194)
reifyimply(w-literal(actionTo_00002,2), aux195)
ineq(aux196, aux68, 0)
ineq(aux197, aux71, 0)
reifyimply(diseq(aux59,-1), aux198)
ineq(aux200, aux55, 0)
reifyimply(ineq(3, actionFrom_00003, 0), aux201)
reifyimply(w-literal(actionTo_00003,2), aux202)
ineq(aux203, aux67, 0)
ineq(aux204, aux72, 0)
reifyimply(diseq(aux58,-1), aux205)
ineq(aux207, aux53, 0)
reifyimply(ineq(3, actionFrom_00004, 0), aux208)
reifyimply(w-literal(actionTo_00004,2), aux209)
ineq(aux210, aux69, 0)
ineq(aux211, aux73, 0)
reifyimply(diseq(aux60,-1), aux212)
reifyimply(gaceq(aux63,statePlaces_00002_00002), aux214)
reifyimply(ineq(3, actionFrom_00002, 0), aux215)
reifyimply(w-literal(actionTo_00002,2), aux216)
ineq(aux218, aux71, 0)
reifyimply(diseq(aux59,-1), aux219)
reifyimply(gaceq(aux62,statePlaces_00002_00003), aux220)
reifyimply(ineq(3, actionFrom_00003, 0), aux221)
reifyimply(w-literal(actionTo_00003,2), aux222)
ineq(aux224, aux72, 0)
reifyimply(diseq(aux58,-1), aux225)
reifyimply(w-literal(aux61,4), aux226)
reifyimply(ineq(3, actionFrom_00004, 0), aux227)
reifyimply(w-literal(actionTo_00004,2), aux228)
ineq(aux230, aux73, 0)
reifyimply(diseq(aux60,-1), aux231)
sumleq([pointers_00000_00002,-1],aux94)
sumgeq([pointers_00000_00002,-1],aux94)
sumleq([pointers_00000_00003,-1],aux100)
sumgeq([pointers_00000_00003,-1],aux100)
sumleq([actionFrom_00002,-2],aux70)
sumgeq([actionFrom_00002,-2],aux70)
sumleq([actionTo_00004,-2],aux74)
sumgeq([actionTo_00004,-2],aux74)
sumleq([actionTo_00003,-2],aux75)
sumgeq([actionTo_00003,-2],aux75)
sumleq([actionTo_00002,-2],aux76)
sumgeq([actionTo_00002,-2],aux76)
sumleq([actionFrom_00003,-2],aux77)
sumgeq([actionFrom_00003,-2],aux77)
sumleq([actionFrom_00004,-2],aux78)
sumgeq([actionFrom_00004,-2],aux78)
reifyimply(sumleq([pointers_00000_00002,1],pointers_00000_00003), aux95)
reifyimply(sumgeq([pointers_00000_00002,1],pointers_00000_00003), aux95)
reifyimply(sumleq([3,aux63],statePlaces_00002_00002), aux155)
reifyimply(sumgeq([3,aux63],statePlaces_00002_00002), aux155)
reifyimply(sumleq([statePlaces_00002_00002,aux62],statePlaces_00002_00003), aux163)
reifyimply(sumgeq([statePlaces_00002_00002,aux62],statePlaces_00002_00003), aux163)
reifyimply(sumleq([statePlaces_00002_00003,aux61],4), aux171)
reifyimply(sumgeq([statePlaces_00002_00003,aux61],4), aux171)
reifyimply(weightedsumleq([1,-1],[3,aux63],statePlaces_00002_00002), aux176)
reifyimply(weightedsumgeq([1,-1],[3,aux63],statePlaces_00002_00002), aux176)
reifyimply(weightedsumleq([1,-1],[statePlaces_00002_00002,aux62],statePlaces_00002_00003), aux183)
reifyimply(weightedsumgeq([1,-1],[statePlaces_00002_00002,aux62],statePlaces_00002_00003), aux183)
reifyimply(weightedsumleq([1,-1],[statePlaces_00002_00003,aux61],4), aux190)
reifyimply(weightedsumgeq([1,-1],[statePlaces_00002_00003,aux61],4), aux190)
reifyimply(sumleq([1,aux59],aux63), aux199)
reifyimply(sumgeq([1,aux59],aux63), aux199)
reifyimply(sumleq([1,aux58],aux62), aux206)
reifyimply(sumgeq([1,aux58],aux62), aux206)
reifyimply(sumleq([1,aux60],aux61), aux213)
reifyimply(sumgeq([1,aux60],aux61), aux213)
reifyimply(sumleq([-1,aux59],aux63), aux217)
reifyimply(sumgeq([-1,aux59],aux63), aux217)
reifyimply(sumleq([-1,aux58],aux62), aux223)
reifyimply(sumgeq([-1,aux58],aux62), aux223)
reifyimply(sumleq([-1,aux60],aux61), aux229)
reifyimply(sumgeq([-1,aux60],aux61), aux229)
**EOF**
