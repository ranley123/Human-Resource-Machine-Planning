MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 0
# CSE_active_eliminated_expressions = 0
# CSE_active_total_size = 0
**VARIABLES**
DISCRETE statePlaces_00002_00002 #
{-1..100}
DISCRETE statePlaces_00002_00003 #
{-1..100}
DISCRETE statePlaces_00002_00004 #
{-1..100}
DISCRETE statePlaces_00002_00005 #
{-1..100}
DISCRETE statePlaces_00002_00006 #
{-1..100}
DISCRETE actionTypes_00002 #
{1..2}
DISCRETE actionTypes_00003 #
{1..2}
DISCRETE actionTypes_00004 #
{1..2}
DISCRETE actionTypes_00005 #
{1..2}
DISCRETE actionTypes_00006 #
{1..2}
DISCRETE actionFrom_00002 #
{0..2}
DISCRETE actionFrom_00003 #
{0..2}
DISCRETE actionFrom_00004 #
{0..2}
DISCRETE actionFrom_00005 #
{0..2}
DISCRETE actionFrom_00006 #
{0..2}
DISCRETE actionTo_00002 #
{0..2}
DISCRETE actionTo_00003 #
{0..2}
DISCRETE actionTo_00004 #
{0..2}
DISCRETE actionTo_00005 #
{0..2}
DISCRETE actionTo_00006 #
{0..2}
DISCRETE pointers_00000_00002 #
{0..3}
DISCRETE pointers_00000_00003 #
{0..3}
DISCRETE pointers_00000_00004 #
{0..3}
DISCRETE pointers_00000_00005 #
{0..3}
DISCRETE pointers_00000_00006 #
{0..3}
DISCRETE pointers_00001_00002 #
{0..3}
DISCRETE pointers_00001_00003 #
{0..3}
DISCRETE pointers_00001_00004 #
{0..3}
DISCRETE pointers_00001_00005 #
{0..3}
BOOL aux52 #(1 != actionTypes_00002)
BOOL aux53 #(1 != actionTypes_00003)
BOOL aux54 #(1 != actionTypes_00004)
BOOL aux55 #(1 != actionTypes_00005)
BOOL aux56 #(1 != actionTypes_00006)
BOOL aux57 #(2 != actionTypes_00002)
BOOL aux58 #(2 != actionTypes_00003)
BOOL aux59 #(2 != actionTypes_00004)
BOOL aux60 #(2 != actionTypes_00005)
BOOL aux61 #(2 != actionTypes_00006)
BOOL aux62 #(2=actionTypes_00002)
BOOL aux63 #(2=actionTypes_00003)
BOOL aux64 #(2=actionTypes_00004)
BOOL aux65 #(2=actionTypes_00005)
BOOL aux66 #(2=actionTypes_00006)
BOOL aux67 #(1=actionTypes_00002)
BOOL aux68 #(1=actionTypes_00002)
BOOL aux69 #(1=actionTypes_00002)
BOOL aux70 #(1=actionTypes_00002)
BOOL aux71 #(1=actionTypes_00002)
DISCRETE aux72 #(pointers_00000_00002 + -1)
{-1..2}
BOOL aux73 #(1=actionTypes_00003)
BOOL aux74 #(1=actionTypes_00003)
BOOL aux75 #(1=actionTypes_00003)
BOOL aux76 #(1=actionTypes_00003)
BOOL aux77 #(1=actionTypes_00003)
DISCRETE aux78 #(pointers_00000_00003 + -1)
{-1..2}
BOOL aux79 #(1=actionTypes_00004)
BOOL aux80 #(1=actionTypes_00004)
BOOL aux81 #(1=actionTypes_00004)
BOOL aux82 #(1=actionTypes_00004)
BOOL aux83 #(1=actionTypes_00004)
DISCRETE aux84 #(pointers_00000_00004 + -1)
{-1..2}
BOOL aux85 #(1=actionTypes_00005)
BOOL aux86 #(1=actionTypes_00005)
BOOL aux87 #(1=actionTypes_00005)
BOOL aux88 #(1=actionTypes_00005)
BOOL aux89 #(1=actionTypes_00005)
DISCRETE aux90 #(pointers_00000_00005 + -1)
{-1..2}
BOOL aux91 #(1=actionTypes_00006)
BOOL aux92 #(1=actionTypes_00006)
BOOL aux93 #(1=actionTypes_00006)
BOOL aux94 #(1=actionTypes_00006)
BOOL aux95 #(1=actionTypes_00006)
DISCRETE aux96 #(pointers_00000_00006 + -1)
{-1..2}
BOOL aux97 #(2=actionTypes_00002)
BOOL aux98 #(2=actionTypes_00002)
BOOL aux99 #(2=actionTypes_00002)
BOOL aux100 #(2=actionTypes_00002)
BOOL aux101 #(2=actionTypes_00002)
BOOL aux102 #(2=actionTypes_00002)
DISCRETE aux103 #(pointers_00001_00002 + -1)
{-1..2}
BOOL aux104 #(2=actionTypes_00003)
BOOL aux105 #(2=actionTypes_00003)
BOOL aux106 #(2=actionTypes_00003)
BOOL aux107 #(2=actionTypes_00003)
BOOL aux108 #(2=actionTypes_00003)
BOOL aux109 #(2=actionTypes_00003)
BOOL aux110 #(2=actionTypes_00003)
DISCRETE aux111 #(pointers_00001_00003 + -1)
{-1..2}
BOOL aux112 #(2=actionTypes_00004)
BOOL aux113 #(2=actionTypes_00004)
BOOL aux114 #(2=actionTypes_00004)
BOOL aux115 #(2=actionTypes_00004)
BOOL aux116 #(2=actionTypes_00004)
BOOL aux117 #(2=actionTypes_00004)
BOOL aux118 #(2=actionTypes_00004)
DISCRETE aux119 #(pointers_00001_00004 + -1)
{-1..2}
BOOL aux120 #(2=actionTypes_00005)
BOOL aux121 #(2=actionTypes_00005)
BOOL aux122 #(2=actionTypes_00005)
BOOL aux123 #(2=actionTypes_00005)
BOOL aux124 #(2=actionTypes_00005)
BOOL aux125 #(2=actionTypes_00005)
BOOL aux126 #(2=actionTypes_00005)
DISCRETE aux127 #(pointers_00001_00005 + -1)
{-1..2}
BOOL aux128 #(2=actionTypes_00006)
BOOL aux129 #(2=actionTypes_00006)
BOOL aux130 #(2=actionTypes_00006)
BOOL aux131 #(2=actionTypes_00006)
BOOL aux132 #(2=actionTypes_00006)
BOOL aux133 #(2=actionTypes_00006)
**VARIABLES**
ALIAS output[3]=[1, 2, 3]
**VARIABLES**
ALIAS input[3]=[1, 2, 3]
**SEARCH**
PRINT[[statePlaces_00002_00002],[statePlaces_00002_00003],[statePlaces_00002_00004],[statePlaces_00002_00005],[statePlaces_00002_00006],[actionTypes_00002],[actionTypes_00003],[actionTypes_00004],[actionTypes_00005],[actionTypes_00006],[actionFrom_00002],[actionFrom_00003],[actionFrom_00004],[actionFrom_00005],[actionFrom_00006],[actionTo_00002],[actionTo_00003],[actionTo_00004],[actionTo_00005],[actionTo_00006],[pointers_00000_00002],[pointers_00000_00003],[pointers_00000_00004],[pointers_00000_00005],[pointers_00000_00006],[pointers_00001_00002],[pointers_00001_00003],[pointers_00001_00004],[pointers_00001_00005]]
**CONSTRAINTS**
reify(diseq(1,actionTypes_00002), aux52)
reify(diseq(1,actionTypes_00003), aux53)
reify(diseq(1,actionTypes_00004), aux54)
reify(diseq(1,actionTypes_00005), aux55)
reify(diseq(1,actionTypes_00006), aux56)
reify(diseq(2,actionTypes_00002), aux57)
reify(diseq(2,actionTypes_00003), aux58)
reify(diseq(2,actionTypes_00004), aux59)
reify(diseq(2,actionTypes_00005), aux60)
reify(diseq(2,actionTypes_00006), aux61)
reify(w-literal(actionTypes_00002,2), aux62)
reify(w-literal(actionTypes_00003,2), aux63)
reify(w-literal(actionTypes_00004,2), aux64)
reify(w-literal(actionTypes_00005,2), aux65)
reify(w-literal(actionTypes_00006,2), aux66)
reify(w-literal(actionTypes_00002,1), aux67)
reify(w-literal(actionTypes_00002,1), aux68)
reify(w-literal(actionTypes_00002,1), aux69)
reify(w-literal(actionTypes_00002,1), aux70)
reify(w-literal(actionTypes_00002,1), aux71)
reify(w-literal(actionTypes_00003,1), aux73)
reify(w-literal(actionTypes_00003,1), aux74)
reify(w-literal(actionTypes_00003,1), aux75)
reify(w-literal(actionTypes_00003,1), aux76)
reify(w-literal(actionTypes_00003,1), aux77)
reify(w-literal(actionTypes_00004,1), aux79)
reify(w-literal(actionTypes_00004,1), aux80)
reify(w-literal(actionTypes_00004,1), aux81)
reify(w-literal(actionTypes_00004,1), aux82)
reify(w-literal(actionTypes_00004,1), aux83)
reify(w-literal(actionTypes_00005,1), aux85)
reify(w-literal(actionTypes_00005,1), aux86)
reify(w-literal(actionTypes_00005,1), aux87)
reify(w-literal(actionTypes_00005,1), aux88)
reify(w-literal(actionTypes_00005,1), aux89)
reify(w-literal(actionTypes_00006,1), aux91)
reify(w-literal(actionTypes_00006,1), aux92)
reify(w-literal(actionTypes_00006,1), aux93)
reify(w-literal(actionTypes_00006,1), aux94)
reify(w-literal(actionTypes_00006,1), aux95)
reify(w-literal(actionTypes_00002,2), aux97)
reify(w-literal(actionTypes_00002,2), aux98)
reify(w-literal(actionTypes_00002,2), aux99)
reify(w-literal(actionTypes_00002,2), aux100)
reify(w-literal(actionTypes_00002,2), aux101)
reify(w-literal(actionTypes_00002,2), aux102)
reify(w-literal(actionTypes_00003,2), aux104)
reify(w-literal(actionTypes_00003,2), aux105)
reify(w-literal(actionTypes_00003,2), aux106)
reify(w-literal(actionTypes_00003,2), aux107)
reify(w-literal(actionTypes_00003,2), aux108)
reify(w-literal(actionTypes_00003,2), aux109)
reify(w-literal(actionTypes_00003,2), aux110)
reify(w-literal(actionTypes_00004,2), aux112)
reify(w-literal(actionTypes_00004,2), aux113)
reify(w-literal(actionTypes_00004,2), aux114)
reify(w-literal(actionTypes_00004,2), aux115)
reify(w-literal(actionTypes_00004,2), aux116)
reify(w-literal(actionTypes_00004,2), aux117)
reify(w-literal(actionTypes_00004,2), aux118)
reify(w-literal(actionTypes_00005,2), aux120)
reify(w-literal(actionTypes_00005,2), aux121)
reify(w-literal(actionTypes_00005,2), aux122)
reify(w-literal(actionTypes_00005,2), aux123)
reify(w-literal(actionTypes_00005,2), aux124)
reify(w-literal(actionTypes_00005,2), aux125)
reify(w-literal(actionTypes_00005,2), aux126)
reify(w-literal(actionTypes_00006,2), aux128)
reify(w-literal(actionTypes_00006,2), aux129)
reify(w-literal(actionTypes_00006,2), aux130)
reify(w-literal(actionTypes_00006,2), aux131)
reify(w-literal(actionTypes_00006,2), aux132)
reify(w-literal(actionTypes_00006,2), aux133)
watched-or({ineq(statePlaces_00002_00005, statePlaces_00002_00006, -1),ineq(statePlaces_00002_00006, statePlaces_00002_00005, -1),lexless([pointers_00000_00005, pointers_00001_00005],[pointers_00000_00006, 3])})
watched-or({ineq(statePlaces_00002_00002, 1, -1),ineq(1, statePlaces_00002_00002, -1),lexless([1, 0],[pointers_00000_00002, pointers_00001_00002])})
watched-or({ineq(statePlaces_00002_00003, 1, -1),ineq(1, statePlaces_00002_00003, -1),lexless([1, 0],[pointers_00000_00003, pointers_00001_00003])})
watched-or({ineq(statePlaces_00002_00004, 1, -1),ineq(1, statePlaces_00002_00004, -1),lexless([1, 0],[pointers_00000_00004, pointers_00001_00004])})
watched-or({ineq(statePlaces_00002_00005, 1, -1),ineq(1, statePlaces_00002_00005, -1),lexless([1, 0],[pointers_00000_00005, pointers_00001_00005])})
watched-or({ineq(statePlaces_00002_00006, 1, -1),ineq(1, statePlaces_00002_00006, -1),lexless([1, 0],[pointers_00000_00006, 3])})
watched-or({ineq(statePlaces_00002_00002, statePlaces_00002_00003, -1),ineq(statePlaces_00002_00003, statePlaces_00002_00002, -1),lexless([pointers_00000_00002, pointers_00001_00002],[pointers_00000_00003, pointers_00001_00003])})
watched-or({ineq(statePlaces_00002_00002, statePlaces_00002_00004, -1),ineq(statePlaces_00002_00004, statePlaces_00002_00002, -1),lexless([pointers_00000_00002, pointers_00001_00002],[pointers_00000_00004, pointers_00001_00004])})
watched-or({ineq(statePlaces_00002_00002, statePlaces_00002_00005, -1),ineq(statePlaces_00002_00005, statePlaces_00002_00002, -1),lexless([pointers_00000_00002, pointers_00001_00002],[pointers_00000_00005, pointers_00001_00005])})
watched-or({ineq(statePlaces_00002_00002, statePlaces_00002_00006, -1),ineq(statePlaces_00002_00006, statePlaces_00002_00002, -1),lexless([pointers_00000_00002, pointers_00001_00002],[pointers_00000_00006, 3])})
watched-or({ineq(statePlaces_00002_00003, statePlaces_00002_00004, -1),ineq(statePlaces_00002_00004, statePlaces_00002_00003, -1),lexless([pointers_00000_00003, pointers_00001_00003],[pointers_00000_00004, pointers_00001_00004])})
watched-or({ineq(statePlaces_00002_00003, statePlaces_00002_00005, -1),ineq(statePlaces_00002_00005, statePlaces_00002_00003, -1),lexless([pointers_00000_00003, pointers_00001_00003],[pointers_00000_00005, pointers_00001_00005])})
watched-or({ineq(statePlaces_00002_00003, statePlaces_00002_00006, -1),ineq(statePlaces_00002_00006, statePlaces_00002_00003, -1),lexless([pointers_00000_00003, pointers_00001_00003],[pointers_00000_00006, 3])})
watched-or({ineq(statePlaces_00002_00004, statePlaces_00002_00005, -1),ineq(statePlaces_00002_00005, statePlaces_00002_00004, -1),lexless([pointers_00000_00004, pointers_00001_00004],[pointers_00000_00005, pointers_00001_00005])})
watched-or({ineq(statePlaces_00002_00004, statePlaces_00002_00006, -1),ineq(statePlaces_00002_00006, statePlaces_00002_00004, -1),lexless([pointers_00000_00004, pointers_00001_00004],[pointers_00000_00006, 3])})
reifyimply(w-literal(pointers_00000_00002,1), aux52)
reifyimply(gaceq(pointers_00000_00002,pointers_00000_00003), aux53)
reifyimply(gaceq(pointers_00000_00003,pointers_00000_00004), aux54)
reifyimply(gaceq(pointers_00000_00004,pointers_00000_00005), aux55)
reifyimply(gaceq(pointers_00000_00005,pointers_00000_00006), aux56)
reifyimply(w-literal(pointers_00001_00002,0), aux57)
reifyimply(gaceq(pointers_00001_00002,pointers_00001_00003), aux58)
reifyimply(gaceq(pointers_00001_00003,pointers_00001_00004), aux59)
reifyimply(gaceq(pointers_00001_00004,pointers_00001_00005), aux60)
reifyimply(w-literal(pointers_00001_00005,3), aux61)
reifyimply(w-literal(statePlaces_00002_00002,1), aux62)
reifyimply(gaceq(statePlaces_00002_00002,statePlaces_00002_00003), aux63)
reifyimply(gaceq(statePlaces_00002_00003,statePlaces_00002_00004), aux64)
reifyimply(gaceq(statePlaces_00002_00004,statePlaces_00002_00005), aux65)
reifyimply(gaceq(statePlaces_00002_00005,statePlaces_00002_00006), aux66)
reifyimply(w-literal(pointers_00000_00002,2), aux67)
reifyimply(w-literal(actionFrom_00002,0), aux68)
reifyimply(w-literal(actionTo_00002,2), aux69)
reifyimply(w-inintervalset(pointers_00000_00002,[1,3]), aux70)
reifyimply(watchelement_undefzero([1, 2, 3], aux72, statePlaces_00002_00002), aux71)
reifyimply(w-literal(actionFrom_00003,0), aux74)
reifyimply(w-literal(actionTo_00003,2), aux75)
reifyimply(w-inintervalset(pointers_00000_00003,[1,3]), aux76)
reifyimply(watchelement_undefzero([1, 2, 3], aux78, statePlaces_00002_00003), aux77)
reifyimply(w-literal(actionFrom_00004,0), aux80)
reifyimply(w-literal(actionTo_00004,2), aux81)
reifyimply(w-inintervalset(pointers_00000_00004,[1,3]), aux82)
reifyimply(watchelement_undefzero([1, 2, 3], aux84, statePlaces_00002_00004), aux83)
reifyimply(w-literal(actionFrom_00005,0), aux86)
reifyimply(w-literal(actionTo_00005,2), aux87)
reifyimply(w-inintervalset(pointers_00000_00005,[1,3]), aux88)
reifyimply(watchelement_undefzero([1, 2, 3], aux90, statePlaces_00002_00005), aux89)
reifyimply(w-literal(actionFrom_00006,0), aux92)
reifyimply(w-literal(actionTo_00006,2), aux93)
reifyimply(w-inintervalset(pointers_00000_00006,[1,3]), aux94)
reifyimply(watchelement_undefzero([1, 2, 3], aux96, statePlaces_00002_00006), aux95)
reifyimply(diseq(statePlaces_00002_00002,-1), aux97)
reifyimply(w-literal(pointers_00001_00002,1), aux98)
reifyimply(w-literal(actionFrom_00002,2), aux99)
reifyimply(w-literal(actionTo_00002,1), aux100)
reifyimply(w-inintervalset(pointers_00001_00002,[1,3]), aux101)
reifyimply(watchelement_undefzero([1, 2, 3], aux103, 1), aux102)
reifyimply(diseq(statePlaces_00002_00003,-1), aux104)
reifyimply(diseq(statePlaces_00002_00002,-1), aux105)
reifyimply(w-literal(actionFrom_00003,2), aux107)
reifyimply(w-literal(actionTo_00003,1), aux108)
reifyimply(w-inintervalset(pointers_00001_00003,[1,3]), aux109)
reifyimply(watchelement_undefzero([1, 2, 3], aux111, statePlaces_00002_00002), aux110)
reifyimply(diseq(statePlaces_00002_00004,-1), aux112)
reifyimply(diseq(statePlaces_00002_00003,-1), aux113)
reifyimply(w-literal(actionFrom_00004,2), aux115)
reifyimply(w-literal(actionTo_00004,1), aux116)
reifyimply(w-inintervalset(pointers_00001_00004,[1,3]), aux117)
reifyimply(watchelement_undefzero([1, 2, 3], aux119, statePlaces_00002_00003), aux118)
reifyimply(diseq(statePlaces_00002_00005,-1), aux120)
reifyimply(diseq(statePlaces_00002_00004,-1), aux121)
reifyimply(w-literal(actionFrom_00005,2), aux123)
reifyimply(w-literal(actionTo_00005,1), aux124)
reifyimply(w-inintervalset(pointers_00001_00005,[1,3]), aux125)
reifyimply(watchelement_undefzero([1, 2, 3], aux127, statePlaces_00002_00004), aux126)
reifyimply(diseq(statePlaces_00002_00006,-1), aux128)
reifyimply(diseq(statePlaces_00002_00005,-1), aux129)
reifyimply(w-literal(pointers_00001_00005,2), aux130)
reifyimply(w-literal(actionFrom_00006,2), aux131)
reifyimply(w-literal(actionTo_00006,1), aux132)
reifyimply(w-literal(statePlaces_00002_00005,3), aux133)
sumleq([pointers_00000_00002,-1],aux72)
sumgeq([pointers_00000_00002,-1],aux72)
sumleq([pointers_00000_00003,-1],aux78)
sumgeq([pointers_00000_00003,-1],aux78)
sumleq([pointers_00000_00004,-1],aux84)
sumgeq([pointers_00000_00004,-1],aux84)
sumleq([pointers_00000_00005,-1],aux90)
sumgeq([pointers_00000_00005,-1],aux90)
sumleq([pointers_00000_00006,-1],aux96)
sumgeq([pointers_00000_00006,-1],aux96)
sumleq([pointers_00001_00002,-1],aux103)
sumgeq([pointers_00001_00002,-1],aux103)
sumleq([pointers_00001_00003,-1],aux111)
sumgeq([pointers_00001_00003,-1],aux111)
sumleq([pointers_00001_00004,-1],aux119)
sumgeq([pointers_00001_00004,-1],aux119)
sumleq([pointers_00001_00005,-1],aux127)
sumgeq([pointers_00001_00005,-1],aux127)
reifyimply(sumleq([pointers_00000_00002,1],pointers_00000_00003), aux73)
reifyimply(sumgeq([pointers_00000_00002,1],pointers_00000_00003), aux73)
reifyimply(sumleq([pointers_00000_00003,1],pointers_00000_00004), aux79)
reifyimply(sumgeq([pointers_00000_00003,1],pointers_00000_00004), aux79)
reifyimply(sumleq([pointers_00000_00004,1],pointers_00000_00005), aux85)
reifyimply(sumgeq([pointers_00000_00004,1],pointers_00000_00005), aux85)
reifyimply(sumleq([pointers_00000_00005,1],pointers_00000_00006), aux91)
reifyimply(sumgeq([pointers_00000_00005,1],pointers_00000_00006), aux91)
reifyimply(sumleq([pointers_00001_00002,1],pointers_00001_00003), aux106)
reifyimply(sumgeq([pointers_00001_00002,1],pointers_00001_00003), aux106)
reifyimply(sumleq([pointers_00001_00003,1],pointers_00001_00004), aux114)
reifyimply(sumgeq([pointers_00001_00003,1],pointers_00001_00004), aux114)
reifyimply(sumleq([pointers_00001_00004,1],pointers_00001_00005), aux122)
reifyimply(sumgeq([pointers_00001_00004,1],pointers_00001_00005), aux122)
**EOF**
