MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 6
# CSE_active_eliminated_expressions = 24
# CSE_active_total_size = 30
**VARIABLES**
DISCRETE statePlaces_00002_00002 #
{0..100}
DISCRETE statePlaces_00002_00003 #
{0..100}
DISCRETE statePlaces_00002_00004 #
{0..100}
DISCRETE statePlaces_00002_00005 #
{0..100}
DISCRETE statePlaces_00002_00006 #
{0..100}
DISCRETE statePlaces_00002_00007 #
{0..100}
DISCRETE statePlaces_00003_00001 #
{0..100}
DISCRETE statePlaces_00003_00002 #
{0..100}
DISCRETE statePlaces_00003_00003 #
{0..100}
DISCRETE statePlaces_00003_00004 #
{0..100}
DISCRETE statePlaces_00003_00005 #
{0..100}
DISCRETE statePlaces_00003_00006 #
{0..100}
DISCRETE statePlaces_00003_00007 #
{0..100}
DISCRETE actionFrom_00002 #
{2..3}
DISCRETE actionFrom_00003 #
{2..3}
DISCRETE actionFrom_00004 #
{2..3}
DISCRETE actionFrom_00005 #
{2..3}
DISCRETE actionFrom_00006 #
{2..3}
DISCRETE actionFrom_00007 #
{2..3}
DISCRETE actionTo_00002 #
{1..3}
DISCRETE actionTo_00003 #
{1..3}
DISCRETE actionTo_00004 #
{1..3}
DISCRETE actionTo_00005 #
{1..3}
DISCRETE actionTo_00006 #
{1..3}
DISCRETE actionTo_00007 #
{1..3}
DISCRETE pointers_00001_00002 #
{1..2}
DISCRETE pointers_00001_00003 #
{1..2}
DISCRETE pointers_00001_00004 #
{1..2}
DISCRETE pointers_00001_00005 #
{1..2}
DISCRETE pointers_00001_00006 #
{1..2}
DISCRETE pointers_00001_00007 #
{1..2}
BOOL aux14 #Active-CSE: 4 occurrences of this expression or equivalent: (actionTo_00003 != 1)
BOOL aux15 #Active-CSE: 4 occurrences of this expression or equivalent: (actionTo_00007 != 1)
BOOL aux16 #Active-CSE: 4 occurrences of this expression or equivalent: (actionTo_00005 != 1)
BOOL aux17 #Active-CSE: 4 occurrences of this expression or equivalent: (actionTo_00002 != 1)
BOOL aux18 #Active-CSE: 4 occurrences of this expression or equivalent: (actionTo_00006 != 1)
BOOL aux19 #Active-CSE: 4 occurrences of this expression or equivalent: (actionTo_00004 != 1)
DISCRETE aux20 #
{2..3}
DISCRETE aux21 #
{2..3}
DISCRETE aux22 #
{2..3}
DISCRETE aux23 #
{2..3}
DISCRETE aux24 #
{2..3}
DISCRETE aux25 #
{2..3}
BOOL aux26 #(pointers_00001_00002 + -1)
BOOL aux27 #(pointers_00001_00003 + -1)
BOOL aux28 #(pointers_00001_00004 + -1)
BOOL aux29 #(pointers_00001_00005 + -1)
BOOL aux30 #(pointers_00001_00006 + -1)
BOOL aux31 #(pointers_00001_00007 + -1)
BOOL aux32 #(actionFrom_00002 + -2)
BOOL aux33 #(actionFrom_00003 + -2)
BOOL aux34 #(actionFrom_00004 + -2)
BOOL aux35 #(actionFrom_00005 + -2)
BOOL aux36 #(actionFrom_00006 + -2)
BOOL aux37 #(actionFrom_00007 + -2)
**VARIABLES**
ALIAS output[2]=[2, 3]
**VARIABLES**
ALIAS input[2]=[1, 2]
**SEARCH**
PRINT[[statePlaces_00002_00002],[statePlaces_00002_00003],[statePlaces_00002_00004],[statePlaces_00002_00005],[statePlaces_00002_00006],[statePlaces_00002_00007],[statePlaces_00003_00001],[statePlaces_00003_00002],[statePlaces_00003_00003],[statePlaces_00003_00004],[statePlaces_00003_00005],[statePlaces_00003_00006],[statePlaces_00003_00007],[actionFrom_00002],[actionFrom_00003],[actionFrom_00004],[actionFrom_00005],[actionFrom_00006],[actionFrom_00007],[actionTo_00002],[actionTo_00003],[actionTo_00004],[actionTo_00005],[actionTo_00006],[actionTo_00007],[pointers_00001_00002],[pointers_00001_00003],[pointers_00001_00004],[pointers_00001_00005],[pointers_00001_00006],[pointers_00001_00007]]
VARORDER STATIC [statePlaces_00002_00002, statePlaces_00002_00003, statePlaces_00002_00004, statePlaces_00002_00005, statePlaces_00002_00006, statePlaces_00002_00007, statePlaces_00003_00001, statePlaces_00003_00002, statePlaces_00003_00003, statePlaces_00003_00004, statePlaces_00003_00005, statePlaces_00003_00006, statePlaces_00003_00007, actionFrom_00002, actionFrom_00003, actionFrom_00004, actionFrom_00005, actionFrom_00006, actionFrom_00007, actionTo_00002, actionTo_00003, actionTo_00004, actionTo_00005, actionTo_00006, actionTo_00007, pointers_00001_00002, pointers_00001_00003, pointers_00001_00004, pointers_00001_00005, pointers_00001_00006, pointers_00001_00007]
**CONSTRAINTS**
watchelement([2, 3], aux26, aux20)
watchelement([2, 3], aux27, aux21)
watchelement([2, 3], aux28, aux22)
watchelement([2, 3], aux29, aux23)
watchelement([2, 3], aux30, aux24)
watchelement([2, 3], aux31, aux25)
reify(diseq(actionTo_00003,1), aux14)
reify(diseq(actionTo_00007,1), aux15)
reify(diseq(actionTo_00005,1), aux16)
reify(diseq(actionTo_00002,1), aux17)
reify(diseq(actionTo_00006,1), aux18)
reify(diseq(actionTo_00004,1), aux19)
diseq(actionTo_00002,actionFrom_00002)
diseq(actionTo_00003,actionFrom_00003)
diseq(actionTo_00004,actionFrom_00004)
diseq(actionTo_00005,actionFrom_00005)
diseq(actionTo_00006,actionFrom_00006)
diseq(actionTo_00007,actionFrom_00007)
reifyimply(w-literal(pointers_00001_00002,2), !aux17)
reifyimply(w-literal(actionFrom_00002,2), !aux17)
reifyimply(watchelement([statePlaces_00002_00002, statePlaces_00003_00002], aux32, aux20), !aux17)
reifyimply(sumleq([pointers_00001_00002,1],pointers_00001_00003), !aux14)
reifyimply(w-literal(actionFrom_00003,2), !aux14)
reifyimply(watchelement([statePlaces_00002_00003, statePlaces_00003_00003], aux33, aux21), !aux14)
reifyimply(sumleq([pointers_00001_00003,1],pointers_00001_00004), !aux19)
reifyimply(w-literal(actionFrom_00004,2), !aux19)
reifyimply(watchelement([statePlaces_00002_00004, statePlaces_00003_00004], aux34, aux22), !aux19)
reifyimply(sumleq([pointers_00001_00004,1],pointers_00001_00005), !aux16)
reifyimply(w-literal(actionFrom_00005,2), !aux16)
reifyimply(watchelement([statePlaces_00002_00005, statePlaces_00003_00005], aux35, aux23), !aux16)
reifyimply(sumleq([pointers_00001_00005,1],pointers_00001_00006), !aux18)
reifyimply(w-literal(actionFrom_00006,2), !aux18)
reifyimply(watchelement([statePlaces_00002_00006, statePlaces_00003_00006], aux36, aux24), !aux18)
reifyimply(sumleq([pointers_00001_00006,1],pointers_00001_00007), !aux15)
reifyimply(w-literal(actionFrom_00007,2), !aux15)
reifyimply(watchelement([statePlaces_00002_00007, statePlaces_00003_00007], aux37, aux25), !aux15)
reifyimply(w-literal(pointers_00001_00002,1), aux17)
reifyimply(gaceq(pointers_00001_00002,pointers_00001_00003), aux14)
reifyimply(gaceq(pointers_00001_00003,pointers_00001_00004), aux19)
reifyimply(gaceq(pointers_00001_00004,pointers_00001_00005), aux16)
reifyimply(gaceq(pointers_00001_00005,pointers_00001_00006), aux18)
reifyimply(gaceq(pointers_00001_00006,pointers_00001_00007), aux15)
sumleq([pointers_00001_00002,-1],aux26)
sumgeq([pointers_00001_00002,-1],aux26)
sumleq([pointers_00001_00003,-1],aux27)
sumgeq([pointers_00001_00003,-1],aux27)
sumleq([pointers_00001_00004,-1],aux28)
sumgeq([pointers_00001_00004,-1],aux28)
sumleq([pointers_00001_00005,-1],aux29)
sumgeq([pointers_00001_00005,-1],aux29)
sumleq([pointers_00001_00006,-1],aux30)
sumgeq([pointers_00001_00006,-1],aux30)
sumleq([pointers_00001_00007,-1],aux31)
sumgeq([pointers_00001_00007,-1],aux31)
sumleq([actionFrom_00002,-2],aux32)
sumgeq([actionFrom_00002,-2],aux32)
sumleq([actionFrom_00003,-2],aux33)
sumgeq([actionFrom_00003,-2],aux33)
sumleq([actionFrom_00004,-2],aux34)
sumgeq([actionFrom_00004,-2],aux34)
sumleq([actionFrom_00005,-2],aux35)
sumgeq([actionFrom_00005,-2],aux35)
sumleq([actionFrom_00006,-2],aux36)
sumgeq([actionFrom_00006,-2],aux36)
sumleq([actionFrom_00007,-2],aux37)
sumgeq([actionFrom_00007,-2],aux37)
**EOF**
