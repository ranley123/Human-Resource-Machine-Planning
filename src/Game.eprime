language ESSENCE' 1.0

$ Parameters $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

given MAX_OPS: int(1..)
given num_registers: int(0..)
given input: matrix indexed by [int(1..input_length)] of int(0..100)
given output: matrix indexed by [int(1..output_length)] of int(0..100)

$ End of Parameters $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

$ Constants $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

letting STEPS be domain int(0..MAX_OPS)
letting STEPS1 be domain int(1..MAX_OPS)
$ 0 -> IN, 1 -> OUT, 2 -> Hand, rest for registers
letting PLACES be domain int(0..(2 + num_registers))
letting HAND be 2
letting IN be 0
letting OUT be 1

$ operators
letting INBOX be 1
letting OUTBOX be 2
letting COPYFROM be 3
letting COPYTO be 4
letting ADD be 5
letting SUB be 6
letting BUMPPLUS be 7
letting BUMPMINUS be 8

find statePlaces: matrix indexed by [int(2..(2+num_registers)), STEPS] of int(-1..100)
find actionTypes: matrix indexed by [STEPS1] of int(0..8)
find actionFrom: matrix indexed by [STEPS1] of PLACES
find actionTo: matrix indexed by [STEPS1] of PLACES

find pointers: matrix indexed by [int(0..1), STEPS] of int(0..max(input_length, output_length))
such that 

$ initial state
pointers[0,0] = 0,
pointers[1,0] = 0,
pointers[IN, 1] = 1,
pointers[OUT, MAX_OPS] = output_length,

forAll i: int(2..(2 + num_registers)) .
  statePlaces[i, 0] = -1,

$ when it is not INBOX or OUTBOX, then pointers keep the same
forAll step: STEPS1 .
  actionTypes[step] != INBOX ->
  pointers[IN, step] = pointers[IN, step - 1],

forAll step: STEPS1 .
  actionTypes[step] != OUTBOX ->
  pointers[OUT, step] = pointers[OUT, step - 1],

$ when 0
forAll step: STEPS1 .
  pointers[OUT, step - 1] = output_length <->
  actionTypes[step] = 0,


$ when registers dont need to change
forAll step: STEPS1 .
  forAll i: int(3..(2 + num_registers)) .
    actionTypes[step] = INBOX \/ actionTypes[step] = OUTBOX 
    \/ 
    actionTypes[step] = COPYFROM \/ actionTypes[step] = ADD 
    \/ 
    actionTypes[step] = SUB \/ actionTypes[step] = 0
    \/ 
    (actionTypes[step] = COPYTO /\ actionTo[step] != i) 
    \/ 
    (actionTypes[step] =BUMPPLUS /\ actionFrom[step] != i) 
    \/ 
    (actionTypes[step] = BUMPMINUS /\ actionFrom[step] != i) ->
    statePlaces[i, step] = statePlaces[i, step - 1],

$ when HAND doesnt need to change
forAll step: STEPS1 .
  actionTypes[step] = COPYTO \/ actionTypes[step] = 0 ->
  statePlaces[HAND, step] = statePlaces[HAND, step - 1],

$ when INBOX: IN -> HAND
forAll step: STEPS1 .
  actionTypes[step] = INBOX -> 
  $ actionFrom IN
  actionFrom[step] = IN
  /\ $ actionTo HAND
  actionTo[step] = HAND
  /\
  $ move the input pointer 
  pointers[IN, step] = pointers[IN, step - 1] + 1
  /\
  pointers[IN, step] <= input_length
  /\ $ the hand value and input value is the same
  input[pointers[IN, step]] = statePlaces[HAND, step],

$ when OUTBOX
forAll step: STEPS1 .
  actionTypes[step] = OUTBOX -> 
  $ actionFrom Hand
  actionFrom[step] = HAND
  /\ $ actionTo OUT
  actionTo[step] = OUT
  /\ $ move out pointer
  pointers[OUT, step] = pointers[OUT, step - 1] + 1
  /\ 
  pointers[OUT, step] <= output_length
  /\ $ HAND is not empty
  statePlaces[HAND, step - 1] != -1
  /\ $ HAND is empty in the current
  statePlaces[HAND, step] = -1
  /\ $ output value is equal to the HAND's last state
  output[pointers[OUT, step]] = statePlaces[HAND, step - 1],

$ when COPYFROM REG -> HAND
forAll step: STEPS1 .
  actionTypes[step] = COPYFROM -> 
  $ actionFrom a REG
  actionFrom[step] >= 3
  /\
  actionFrom[step] <= (2 + num_registers)
  /\ $ actionTo must be HAND
  actionTo[step] = HAND
  /\ $ the REG box is not empty
  statePlaces[actionFrom[step], step] != -1
  /\ $ the reg must be same as hand
  statePlaces[actionFrom[step], step] = statePlaces[actionTo[step], step],

$ when COPYTO = 4 HAND -> REG
forAll step: STEPS1 .
  actionTypes[step] = COPYTO ->
  $ must from HAND
  actionFrom[step] = HAND
  /\ $ the HAND is not empty
  statePlaces[HAND, step-1] != -1
  /\
  actionFrom[step] >= 3
  /\
  actionFrom[step] <= (2 + num_registers)
  /\ $ values are equal
  statePlaces[actionFrom[step], step] = statePlaces[actionTo[step], step],

$ when ADD: REG -> Hand
forAll step: STEPS1 .
  actionTypes[step] = ADD ->
  $ from a reg
  actionFrom[step] >= 3
  /\
  actionFrom[step] <= (2 + num_registers)
  /\ $ reg is not empty
  statePlaces[actionFrom[step], step] != -1
  /\ $ to Hand
  actionTo[step] = HAND
  /\ $ hand is not empty
  statePlaces[actionTo[step], step - 1] != -1
  /\ $ previous hand state
  statePlaces[HAND, step] = statePlaces[actionFrom[step], step] + statePlaces[HAND, step - 1],

$ when SUB: REG -> HAND
forAll step: STEPS1 .
  actionTypes[step] = SUB ->
  $ from a reg
  actionFrom[step] >= 3
  /\
  actionFrom[step] <= (2 + num_registers)
  /\ $ reg is not empty
  statePlaces[actionFrom[step], step] != -1
  /\ $ to Hand
  actionTo[step] = HAND
  /\ $ hand is not empty
  statePlaces[actionTo[step], step - 1] != -1
  /\
  statePlaces[HAND, step] = statePlaces[HAND, step - 1] - statePlaces[actionFrom[step], step],

$ when BUMP+
forAll step: STEPS1 .
  actionTypes[step] = BUMPPLUS ->
  actionFrom[step] >= 3
  /\
  actionFrom[step] <= (2 + num_registers)
  /\ $ the register is not empty
  statePlaces[actionFrom[step], step - 1] != -1
  /\
  actionTo[step] = HAND
  /\
  statePlaces[actionFrom[step], step] = statePlaces[actionFrom[step], step - 1] + 1
  /\
  statePlaces[actionFrom[step], step] = statePlaces[actionTo[step], step],

$ when BUMP-: REG -> HAND
forAll step: STEPS1 .
  actionTypes[step] = BUMPMINUS ->
  actionFrom[step] >= 3
  /\
  actionFrom[step] <= (2 + num_registers)
  /\
  statePlaces[actionFrom[step], step - 1] != -1
  /\
  actionTo[step] = HAND
  /\
  statePlaces[actionFrom[step], step] = statePlaces[actionFrom[step], step - 1] - 1
  /\
  statePlaces[actionFrom[step], step] = statePlaces[HAND, step],

true