language ESSENCE' 1.0

$ Parameters $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

given MAX_OPS: int(1..)
given num_registers: int(0..)
given input: matrix indexed by [int(1..input_length)] of int(0..100)
given output: matrix indexed by [int(1..output_length)] of int(0..100)

$ End of Parameters $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

$ Constants $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

letting STEPS be domain int(0..MAX_OPS)
letting STEPS1 be domain int(1..MAX_OPS)
$ 0 -> IN, 1 -> OUT, 2 -> Hand, rest for registers
letting PLACES be domain int(0..(2 + num_registers))
letting HAND be 2
letting IN be 0
letting OUT be 1


find statePlaces: matrix indexed by [int(1..3), STEPS1] of int(0..100)
find actionFrom: matrix indexed by [STEPS1] of PLACES
find actionTo: matrix indexed by [STEPS1] of PLACES
find arg: matrix indexed by [STEPS1] of int(-1, PLACES)
$ find out: matrix indexed by [int(1..output_length)] of int(0..100)
find pointers: matrix indexed by [int(0..1), STEPS] of int(1..input_length)
such that 

$ initial state
pointers[0,0] = 1,
pointers[1,0] = 1,
actionFrom[1] = 0,


$ actionFrom cannot be OUT 1, actionTo cannot be IN 0
forAll i: STEPS1 . actionFrom[i] != 1 /\ actionTo[i] != 0 /\ actionFrom[i] != actionTo[i],

$ pointers
forAll step: STEPS1 .
  actionFrom[step] = IN -> ((pointers[IN, step] = pointers[IN, step-1] + 1) /\ (actionTo[step] = HAND /\ input[pointers[IN, step]] = statePlaces[actionTo[step], step])),

forAll step: STEPS1 .
  actionFrom[step] != IN -> pointers[IN, step] = pointers[IN, step - 1],

forAll step: STEPS1 .
  actionTo[step] = OUT -> ((pointers[OUT, step] = pointers[OUT, step - 1] + 1) /\ (actionFrom[step] = HAND /\ output[pointers[OUT, step]] = statePlaces[actionFrom[step], step])),

forAll step: STEPS1 .
  actionTo[step] != OUT -> pointers[OUT, step] = pointers[OUT, step - 1],


true
